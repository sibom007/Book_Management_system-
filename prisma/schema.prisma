// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  
  books         Book[] // One-to-many relationship with Book
  chapters      Chapter[] // One-to-many relationship with Chapter
  accounts      Account[]
  sessions      Session[]
  Question      Question[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  identifier String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Book {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  class        Int
  author       String?
  chapterCount Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String    @db.ObjectId // Foreign key to User

  chapters     Chapter[] // One-to-many relationship with Chapter


  User         User      @relation(fields: [userId], references: [id])
}

model Chapter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookId    String   @db.ObjectId // Foreign key to Book
  userId   String?    @db.ObjectId
  Question Question[]

  book      Book     @relation(fields: [bookId], references: [id])
  User     User?      @relation(fields: [userId], references: [id])
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapterId String  @db.ObjectId // Foreign key to Chapter
  userId   String    @db.ObjectId
  User     User      @relation(fields: [userId], references: [id])
  chapter   Chapter @relation(fields: [chapterId], references: [id]) 
}
